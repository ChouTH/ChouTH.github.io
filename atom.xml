<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chouth</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chouth.github.io/"/>
  <updated>2018-06-04T15:41:39.286Z</updated>
  <id>https://chouth.github.io/</id>
  
  <author>
    <name>Tianhao Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS Promise</title>
    <link href="https://chouth.github.io/2018/06/04/js-promise/"/>
    <id>https://chouth.github.io/2018/06/04/js-promise/</id>
    <published>2018-06-04T14:28:49.000Z</published>
    <updated>2018-06-04T15:41:39.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h1><p>Promise 是一个在将来未知时间返回异步操作单一结果的对象。</p><blockquote><p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p></blockquote><h2 id="Promise-有三种状态"><a href="#Promise-有三种状态" class="headerlink" title="Promise 有三种状态:"></a>Promise 有三种状态:</h2><ol><li>pending: 初始状态，既不是完成也不是拒绝</li><li>fulfilled: 完成状态，说明操作已经成功完成</li><li>rejected: 拒绝状态，说明操作失败</li></ol><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>通过 <code>new</code> 来创建一个 <code>Promise</code> 对象， Promise 有 <code>resolve</code> 和 <code>reject</code> 2个参数，操作完成时调用 <code>resolve</code>, 操作失败时调用 <code>reject</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAsyncFunction</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(xhr.responseText);</span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(xhr.statusText);</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>使用 <code>promise.then(successCallback, failureCallback)</code> 来链式调用 promise</p><p>使用 <code>promise.catch(failureCallback)</code> 来处理错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Initial'</span>);</span><br><span class="line"></span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Something failed'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do this'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do that'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do this, no matter what happened before'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial</span></span><br><span class="line"><span class="comment">// Do that</span></span><br><span class="line"><span class="comment">// Do this, no matter what happened before</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>有时我们需要等待所有异步操作都完成之后再进行某些操作，这时我们可以使用 <code>promise.all</code></p><p>虽然 <code>text2</code> 只需要 500 毫秒就能完成，但是代码的结果是 2秒后一起返回 <code>text1</code> 和 <code>text2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(&#123; <span class="attr">content</span>: <span class="string">'I love js'</span>&#125;);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve([<span class="string">'I like css too!'</span>]);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">  .all([text1, text2])</span><br><span class="line">  .then(<span class="function"><span class="params">responses</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [text1Content, text2Contect] = responses;</span><br><span class="line">    <span class="built_in">console</span>.log(text1Content, text2Contect)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="JS-sleep-方法"><a href="#JS-sleep-方法" class="headerlink" title="JS sleep 方法"></a>JS sleep 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Taking a break...'</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Two second later'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-Promise&quot;&gt;&lt;a href=&quot;#什么是-Promise&quot; class=&quot;headerlink&quot; title=&quot;什么是 Promise&quot;&gt;&lt;/a&gt;什么是 Promise&lt;/h1&gt;&lt;p&gt;Promise 是一个在将来未知时间返回异步操作单一结果的对象。&lt;/
      
    
    </summary>
    
    
      <category term="js" scheme="https://chouth.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Memory Game</title>
    <link href="https://chouth.github.io/2018/06/03/memory-game/"/>
    <id>https://chouth.github.io/2018/06/03/memory-game/</id>
    <published>2018-06-03T10:46:53.000Z</published>
    <updated>2018-06-04T15:45:04.615Z</updated>
    
    <content type="html"><![CDATA[<a href="https://chouth.github.io/memory-game/index.html">memory game</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a href=&quot;https://chouth.github.io/memory-game/index.html&quot;&gt;memory game&lt;/a&gt;

      
    
    </summary>
    
      <category term="game" scheme="https://chouth.github.io/categories/game/"/>
    
    
      <category term="demo" scheme="https://chouth.github.io/tags/demo/"/>
    
      <category term="js" scheme="https://chouth.github.io/tags/js/"/>
    
  </entry>
  
</feed>
