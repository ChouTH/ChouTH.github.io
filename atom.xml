<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chouth</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://chouth.github.io/"/>
  <updated>2018-06-07T16:00:34.260Z</updated>
  <id>https://chouth.github.io/</id>
  
  <author>
    <name>Tianhao Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS数据结构 - 单向链表 - Loop in Linked List</title>
    <link href="https://chouth.github.io/2018/06/07/loop-in-linked-list/"/>
    <id>https://chouth.github.io/2018/06/07/loop-in-linked-list/</id>
    <published>2018-06-07T12:16:04.000Z</published>
    <updated>2018-06-07T16:00:34.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表中的环"><a href="#链表中的环" class="headerlink" title="链表中的环"></a>链表中的环</h1><h2 id="问题：给定一个单向链表，如何判断链表中是否有环？"><a href="#问题：给定一个单向链表，如何判断链表中是否有环？" class="headerlink" title="问题：给定一个单向链表，如何判断链表中是否有环？"></a>问题：给定一个单向链表，如何判断链表中是否有环？</h2><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>兔子和乌龟要进行一次赛跑，他们将在跑道同一位置同时起跑：</p><ol><li>如果在<code>直线</code>跑道上比赛，那么兔子和乌龟最终会分别跑到终点；</li><li>如果在<code>圆形</code>跑道上比赛，因为兔子的速度比乌龟快，所以兔子最终会赶上乌龟。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *   this.val = val;</span></span><br><span class="line"><span class="comment"> *   this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果头节点不存在，或者链表只有头节点，则链表没有环</span></span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 慢指针每次移动一步，快指针每次移动两步</span></span><br><span class="line">  <span class="keyword">let</span> slow = head.next;</span><br><span class="line">  <span class="keyword">let</span> fast = head.next.next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 快指针已经到达终点，说明链表没有环</span></span><br><span class="line">  <span class="keyword">if</span>(fast === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每移动一次就检查一遍两个指针是否相遇</span></span><br><span class="line">  <span class="keyword">while</span>(slow!==fast)&#123;</span><br><span class="line">    <span class="comment">// 如果快指针下一步可以到达终点，说明链表没有环</span></span><br><span class="line">    <span class="keyword">if</span>(fast.next === <span class="literal">null</span> || fast.next.next === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 慢指针向前走一步，快指针向前走两步</span></span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 两个指针相遇，说明链表有环</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="新问题：对于有环单向链表，如何找到的环的起点。"><a href="#新问题：对于有环单向链表，如何找到的环的起点。" class="headerlink" title="新问题：对于有环单向链表，如何找到的环的起点。"></a>新问题：对于有环单向链表，如何找到的环的起点。</h2><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>判断链表是否有环的逻辑和上面一样，现在只关注有环的情况。</p><p>假设:</p><ul><li>经过<code>k</code>步之后两个指针相遇，</li><li>链表头节点到环的起点的距离为<code>s</code>,</li><li>环的起到到相遇点的距离为<code>m</code>,</li><li>环的长度为<code>L</code></li></ul><p><br></p><p>此时:<br>慢指针走过的路程为:<br>D<sub>slow</sub> = k = s + m + n<sub>1</sub> * L (n<sub>1</sub>为慢指针绕环的次数)</p><p>快指针走过的路程为:<br>D<sub>fast</sub> = 2k = s + m + n<sub>2</sub> * L (n<sub>2</sub>为快指针绕环的次数)</p><p>合并得到<code>s</code>的表达式: s = (n<sub>2</sub> - 2n<sub>1</sub>) * L - m</p><p><img src="Loop-In-Linked-List.jpg" alt=""></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>当两个指针相遇时，将其中一个移动到头节点，然后让两个指针一步一步往后走，它们再次相遇的节点就是环起点。ß</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *   this.val = val;</span></span><br><span class="line"><span class="comment"> *   this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> slow = head.next, fast = head.next.next;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fast === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(slow !== fast)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fast.next === <span class="literal">null</span> || fast.next.next === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  slow = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(slow !== fast)&#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链表中的环&quot;&gt;&lt;a href=&quot;#链表中的环&quot; class=&quot;headerlink&quot; title=&quot;链表中的环&quot;&gt;&lt;/a&gt;链表中的环&lt;/h1&gt;&lt;h2 id=&quot;问题：给定一个单向链表，如何判断链表中是否有环？&quot;&gt;&lt;a href=&quot;#问题：给定一个单向链表，如何判断链
      
    
    </summary>
    
    
      <category term="js" scheme="https://chouth.github.io/tags/js/"/>
    
      <category term="data-structures" scheme="https://chouth.github.io/tags/data-structures/"/>
    
  </entry>
  
  <entry>
    <title>JS数据结构 - 单向链表 - Implementation of Singly Linked List</title>
    <link href="https://chouth.github.io/2018/06/06/js-singly-linked-list/"/>
    <id>https://chouth.github.io/2018/06/06/js-singly-linked-list/</id>
    <published>2018-06-05T16:24:18.000Z</published>
    <updated>2018-06-07T13:12:23.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Implementation-of-Singly-Linked-List-单向链表的实现"><a href="#Implementation-of-Singly-Linked-List-单向链表的实现" class="headerlink" title="Implementation of Singly Linked List 单向链表的实现"></a>Implementation of Singly Linked List 单向链表的实现</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单项链表是有一系列节点串联起来的一种数据结构，每个节点包括一个数据值和一个指针，指针可以指向另一个节点。</p><p><img src="15282092294403.jpg" alt=""></p><p>跟数组不同，我们无法直接通过下标获取单向链表的第<code>n</code>项的值，我们只能一个接一个地遍历链表节点，并根据节点的<code>next</code>指针找到下一个节点，直到找到我们想要的节点。</p><p>举个例子，假设上图中值为23的节点是链表的头节点，如果我们想要获取值为15的节点，我们必须从头节点开始，通过<code>next</code>指针找到值为6的节点，再根据<code>next</code>指针找到值为15的节点。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p>已有一个单向链表如下图所示，<br><img src="15282099024240.jpg" alt=""></p><p>假设我们希望在<code>prev</code>和<code>next</code>节点中添加一个<code>cur</code>节点，我们需要进行以下操作：</p><ol><li><p>初始化需要添加的<code>cur</code>节点，给节点敷一个值。<br><img src="15282098271599.png" alt=""></p></li><li><p>把<code>cur</code>节点的<code>next</code>指针指向<code>prev</code>节点的<code>next</code>指针所指的<code>next</code>节点。<br><img src="15282098307174.png" alt=""></p></li><li><p>把<code>prev</code>节点的<code>next</code>指针指向<code>cur</code>节点。<br><img src="15282098335472.png" alt=""></p></li></ol><hr><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>已有一个单向链表如下图所示，<br><img src="15282122185894.png" alt=""></p><p>如果我们想要删除<code>cur</code>节点，我们需要进行以下操作：</p><ol><li><p>找到<code>cur</code>节点的前一个节点<code>prev</code>和后一个节点<code>next</code><br><img src="15282123171394.png" alt=""></p></li><li><p>把<code>prev</code>节点指向<code>next</code>节点<br><img src="15282124857869.png" alt=""></p></li></ol><hr><h2 id="实现单向链表-SinglyList"><a href="#实现单向链表-SinglyList" class="headerlink" title="实现单向链表 SinglyList"></a>实现单向链表 SinglyList</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点样例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sampleNode = &#123; <span class="attr">val</span> : <span class="number">0</span>, <span class="attr">next</span> : <span class="literal">null</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义单向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> SinglyLinkedList = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型链中添加 Get 方法，返回下标为 index 的节点的值，如果 index 无效则返回 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SinglyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">      <span class="comment">// 下标大于链表长度，返回 null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链表头开始遍历链表</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 在找到第 index 项之前，继续遍历链表</span></span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回下标为 index 的节点的值</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的头部位置添加一个值为 val 的节点，并将新节点作为链表的头部</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SinglyLinkedList.prototype.addAtHead = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个新节点，把新节点的 next 指针指向链表的头节点</span></span><br><span class="line">  <span class="keyword">const</span> newNode = &#123; val, <span class="attr">next</span> : <span class="keyword">this</span>.head &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把新节点设为链表新的头节点</span></span><br><span class="line">  <span class="keyword">this</span>.head = newNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了新节点，链表长度加1</span></span><br><span class="line">  <span class="keyword">this</span>.length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的尾部添加值为 val 的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SinglyLinkedList.prototype.addAtTail = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 链表长度为0，调用在头部添加节点的方法</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.addAtHead(val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从头节点开始遍历到尾节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">while</span>(currentNode.next)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建新的节点</span></span><br><span class="line">  <span class="keyword">const</span> newNode = &#123;val&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把链表尾节点的 next 指向新的节点</span></span><br><span class="line">  currentNode.next = newNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了新节点，链表长度加1</span></span><br><span class="line">  <span class="keyword">this</span>.length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的第 index 项添加一个值为 val 的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果 index 等于链表的长度，则在链表尾部添加节点</span></span><br><span class="line"><span class="comment"> * 如果 index 大于大于链表长度，则不添加节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SinglyLinkedList.prototype.addAtIndex = <span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// index 大于链表长度，直接返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(index === <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// index 等于链表长度，调用在尾部添加节点的方法</span></span><br><span class="line">    <span class="keyword">this</span>.addAtTail(val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(index === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// index 等于0，调用在头部添加节点的方法</span></span><br><span class="line">    <span class="keyword">this</span>.addAtHead(val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从头节点开始遍历链表到第 （index - 1） 个节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (index - <span class="number">1</span>); i++)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  <span class="keyword">const</span> newNode = &#123;val&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新节点的 next 指向第 （index - 1） 个节点的 next</span></span><br><span class="line">  newNode.next = currentNode.next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第 （index - 1） 个节点的 next 指向新的节点</span></span><br><span class="line">  currentNode.next = newNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了新节点，链表长度加1</span></span><br><span class="line">  <span class="keyword">this</span>.length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从链表中删除第 index 个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SinglyLinkedList.prototype.deleteAtIndex = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// index 的值应该小于链表长度，直接返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从头节点开始遍历到第 （index - 1） 个节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (index<span class="number">-1</span>); i++)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把第（index - 1） 个节点的 next 指向第 （index + 1）个节点</span></span><br><span class="line">  currentNode.next = currentNode.next.next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除了节点，链表长度减1</span></span><br><span class="line">  <span class="keyword">this</span>.length--;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Implementation-of-Singly-Linked-List-单向链表的实现&quot;&gt;&lt;a href=&quot;#Implementation-of-Singly-Linked-List-单向链表的实现&quot; class=&quot;headerlink&quot; title=&quot;Impl
      
    
    </summary>
    
    
      <category term="js" scheme="https://chouth.github.io/tags/js/"/>
    
      <category term="data-structures" scheme="https://chouth.github.io/tags/data-structures/"/>
    
  </entry>
  
  <entry>
    <title>JS Promise</title>
    <link href="https://chouth.github.io/2018/06/04/js-promise/"/>
    <id>https://chouth.github.io/2018/06/04/js-promise/</id>
    <published>2018-06-04T14:28:49.000Z</published>
    <updated>2018-06-04T15:41:39.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h1><p>Promise 是一个在将来未知时间返回异步操作单一结果的对象。</p><blockquote><p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p></blockquote><h2 id="Promise-有三种状态"><a href="#Promise-有三种状态" class="headerlink" title="Promise 有三种状态:"></a>Promise 有三种状态:</h2><ol><li>pending: 初始状态，既不是完成也不是拒绝</li><li>fulfilled: 完成状态，说明操作已经成功完成</li><li>rejected: 拒绝状态，说明操作失败</li></ol><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>通过 <code>new</code> 来创建一个 <code>Promise</code> 对象， Promise 有 <code>resolve</code> 和 <code>reject</code> 2个参数，操作完成时调用 <code>resolve</code>, 操作失败时调用 <code>reject</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAsyncFunction</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(xhr.responseText);</span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(xhr.statusText);</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>使用 <code>promise.then(successCallback, failureCallback)</code> 来链式调用 promise</p><p>使用 <code>promise.catch(failureCallback)</code> 来处理错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Initial'</span>);</span><br><span class="line"></span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Something failed'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do this'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do that'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do this, no matter what happened before'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial</span></span><br><span class="line"><span class="comment">// Do that</span></span><br><span class="line"><span class="comment">// Do this, no matter what happened before</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>有时我们需要等待所有异步操作都完成之后再进行某些操作，这时我们可以使用 <code>promise.all</code></p><p>虽然 <code>text2</code> 只需要 500 毫秒就能完成，但是代码的结果是 2秒后一起返回 <code>text1</code> 和 <code>text2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(&#123; <span class="attr">content</span>: <span class="string">'I love js'</span>&#125;);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve([<span class="string">'I like css too!'</span>]);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">  .all([text1, text2])</span><br><span class="line">  .then(<span class="function"><span class="params">responses</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [text1Content, text2Contect] = responses;</span><br><span class="line">    <span class="built_in">console</span>.log(text1Content, text2Contect)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="JS-sleep-方法"><a href="#JS-sleep-方法" class="headerlink" title="JS sleep 方法"></a>JS sleep 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Taking a break...'</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Two second later'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-Promise&quot;&gt;&lt;a href=&quot;#什么是-Promise&quot; class=&quot;headerlink&quot; title=&quot;什么是 Promise&quot;&gt;&lt;/a&gt;什么是 Promise&lt;/h1&gt;&lt;p&gt;Promise 是一个在将来未知时间返回异步操作单一结果的对象。&lt;/
      
    
    </summary>
    
    
      <category term="js" scheme="https://chouth.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Demo - Memory Game</title>
    <link href="https://chouth.github.io/2018/06/03/memory-game/"/>
    <id>https://chouth.github.io/2018/06/03/memory-game/</id>
    <published>2018-06-03T10:46:53.000Z</published>
    <updated>2018-06-07T13:10:52.334Z</updated>
    
    <content type="html"><![CDATA[<a href="https://chouth.github.io/memory-game/index.html">memory game</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a href=&quot;https://chouth.github.io/memory-game/index.html&quot;&gt;memory game&lt;/a&gt;

      
    
    </summary>
    
      <category term="game" scheme="https://chouth.github.io/categories/game/"/>
    
    
      <category term="js" scheme="https://chouth.github.io/tags/js/"/>
    
      <category term="demo" scheme="https://chouth.github.io/tags/demo/"/>
    
  </entry>
  
</feed>
