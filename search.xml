<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Introduction to String</title>
      <link href="/2018/07/05/intro-to-string/"/>
      <url>/2018/07/05/intro-to-string/</url>
      <content type="html"><![CDATA[<p>A string is actually an array of <code>unicode characters</code>. You can perform almost all the operations we used in an array.</p><p>However, there are some differences. In this article, we will go through some of them which you should be aware of when dealing with a string. These features might vary a lot from one language to another.</p><a id="more"></a><hr><hr><h1 id="Add-Binary"><a href="#Add-Binary" class="headerlink" title="Add Binary"></a>Add Binary</h1><p>Given two binary strings, return their sum (also a binary string).</p><p>The input strings are both non-empty and contains only characters 1 or 0.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure></p><p><a href="https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1160" target="_blank" rel="noopener">LeetCode Link</a></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; a</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; b</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Gets the bigger length of the two strings</span></span><br><span class="line">  <span class="keyword">const</span> maxLength = <span class="built_in">Math</span>.max(a.length, b.length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pads strings to make them have the same length</span></span><br><span class="line">  <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart</span></span><br><span class="line">  a = a.padStart(maxLength, <span class="string">'0'</span>);</span><br><span class="line">  b = b.padStart(maxLength, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = maxLength - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    sum = carry + a.charAt(i)*<span class="number">1</span> + b.charAt(i)*<span class="number">1</span>;</span><br><span class="line">    result =  sum % <span class="number">2</span> + result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gets the integer part</span></span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc</span></span><br><span class="line">    carry = <span class="built_in">Math</span>.trunc(sum / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> carry + result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="Implement-strStr"><a href="#Implement-strStr" class="headerlink" title="Implement strStr()"></a>Implement strStr()</h1><p>Implement <a href="http://www.cplusplus.com/reference/cstring/strstr/" target="_blank" rel="noopener">strStr()</a>.</p><p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p><p><strong>Clarification:</strong></p><p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string.<br>This is consistent to C’s <a href="http://www.cplusplus.com/reference/cstring/strstr/" target="_blank" rel="noopener">strstr()</a> and Java’s <a href="http://www.cplusplus.com/reference/cstring/strstr/" target="_blank" rel="noopener">indexOf()</a>.</p><p><a href="https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1161/" target="_blank" rel="noopener">LeetCode Link</a></p><hr><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; haystack</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; needle</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> strStr = <span class="function"><span class="keyword">function</span>(<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Validates the haystack</span></span><br><span class="line">  <span class="keyword">if</span>(haystack === <span class="literal">null</span> || haystack === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure></p><p>Note:</p><p>All given inputs are in lowercase letters a-z.</p><p><a href="https://leetcode.com/explore/learn/card/array-and-string/203/introduction-to-string/1162/" target="_blank" rel="noopener">LeetCode Link</a></p><hr><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initializes the result</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Validates the parameter</span></span><br><span class="line">  <span class="keyword">if</span>(!strs || strs.length === <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Copies the array of strings because we will change the original array (This is optional)</span></span><br><span class="line">  <span class="keyword">const</span> strings = strs;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Gets the first string of the array</span></span><br><span class="line">  <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift</span></span><br><span class="line">  <span class="keyword">const</span> firstStr = strings.shift();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initializes the index and the index value</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> indexVal = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loops over the the rest of the array</span></span><br><span class="line">  <span class="comment">// The loop breaks when the index moves to the end of the first string or a different charecter is found</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gets the character of the first string by index</span></span><br><span class="line">    indexVal = firstStr.charAt(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Checks if all the strings have the same character at same index</span></span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every</span></span><br><span class="line">    <span class="keyword">if</span>( indexVal === <span class="string">""</span> || !strings.every( <span class="function"><span class="params">str</span> =&gt;</span> indexVal === str.charAt(index) ) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Adds the index value to the result</span></span><br><span class="line">      result = result.concat(indexVal);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Increases the index</span></span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Introduction to 2D Array</title>
      <link href="/2018/07/04/intro-to-2d-array/"/>
      <url>/2018/07/04/intro-to-2d-array/</url>
      <content type="html"><![CDATA[<p>Similar to a one-dimensional array, a two-dimensional array also consists of a sequence of elements. But the elements can be laid out in a rectangular grid rather than a line.</p><a id="more"></a><h1 id="Diagonal-Traverse"><a href="#Diagonal-Traverse" class="headerlink" title="Diagonal Traverse"></a>Diagonal Traverse</h1><p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [ 1, 2, 3 ],</span><br><span class="line">  [ 4, 5, 6 ],</span><br><span class="line">  [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output: [1,2,4,7,5,3,6,8,9]</span><br></pre></td></tr></table></figure></p><p><img src="diagonal_traverse.png" alt=""></p><p><a href="https://leetcode.com/explore/learn/card/array-and-string/202/introduction-to-2d-array/1167/" target="_blank" rel="noopener">LeetCode Link</a></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findDiagonalOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> RowSize = matrix.length;</span><br><span class="line">  <span class="keyword">if</span>(RowSize === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ColumnSize = matrix[<span class="number">0</span>].length;</span><br><span class="line">  <span class="keyword">if</span>(ColumnSize === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resultSize = RowSize * ColumnSize;</span><br><span class="line">  <span class="keyword">if</span>(resultSize === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> col = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(result.length &lt; resultSize)&#123;</span><br><span class="line">    <span class="comment">// Puts the number to the result list</span></span><br><span class="line">    result.push( matrix[row][col] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Moves up</span></span><br><span class="line">    <span class="keyword">if</span>( (row + col) % <span class="number">2</span> === <span class="number">0</span> )&#123;</span><br><span class="line">      <span class="comment">// Checks column boundary, this has to be done before checking row boundary</span></span><br><span class="line">      <span class="keyword">if</span>( col === (ColumnSize - <span class="number">1</span>) )&#123;</span><br><span class="line">        row++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Checks row boundary</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>( row === <span class="number">0</span> )&#123;</span><br><span class="line">        col++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Not boundary</span></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        row--;</span><br><span class="line">        col++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Moves down</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// Checks row boundary, this has to be done before checking column boundary</span></span><br><span class="line">      <span class="keyword">if</span>( row === (RowSize - <span class="number">1</span>) )&#123;</span><br><span class="line">        col++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Checks column boundary</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(col === <span class="number">0</span> )&#123;</span><br><span class="line">        row++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Not boundary</span></span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        row++;</span><br><span class="line">        col--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="Spiral-Matrix"><a href="#Spiral-Matrix" class="headerlink" title="Spiral Matrix"></a>Spiral Matrix</h1><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [ 1, 2, 3 ],</span><br><span class="line">  [ 4, 5, 6 ],</span><br><span class="line">  [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9,10,11,12]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure></p><p><a href="https://leetcode.com/explore/learn/card/array-and-string/202/introduction-to-2d-array/1168/" target="_blank" rel="noopener">LeetCode Link</a></p><hr><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> RowSize = matrix.length;</span><br><span class="line">  <span class="keyword">if</span>(RowSize === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ColumnSize = matrix[<span class="number">0</span>].length;</span><br><span class="line">  <span class="keyword">if</span>(ColumnSize === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Moving right first, movable length equals to column size</span></span><br><span class="line">  <span class="keyword">let</span> horizontalMovableLength = ColumnSize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Moving down next, movable length equals to row size minus one</span></span><br><span class="line">  <span class="keyword">let</span> verticalMovableLength = RowSize - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initializes indexs</span></span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> col = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initializes flag</span></span><br><span class="line">  <span class="keyword">let</span> increasementFlag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resultLength = RowSize * ColumnSize;</span><br><span class="line">  <span class="keyword">while</span>(result.length &lt; resultLength)</span><br><span class="line">  &#123;</span><br><span class="line">    moveHorizontally();</span><br><span class="line"></span><br><span class="line">    moveVertically();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Changes the flag to change the moving direction</span></span><br><span class="line">    increasementFlag = increasementFlag * <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">moveHorizontally</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(horizontalMovableLength === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; horizontalMovableLength; i++)&#123;</span><br><span class="line">      <span class="comment">// Adds the number to result</span></span><br><span class="line">      result.push(matrix[row][col]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Increases the column to move horizontally</span></span><br><span class="line">      col += increasementFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Resets the for loop last move</span></span><br><span class="line">    col -= increasementFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Moves the row to avoid duplicate</span></span><br><span class="line">    row += increasementFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Consumes a horizontal length</span></span><br><span class="line">    horizontalMovableLength--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">moveVertically</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(verticalMovableLength === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; verticalMovableLength; i++)&#123;</span><br><span class="line">      <span class="comment">// Adds the number to result</span></span><br><span class="line">      result.push(matrix[row][col]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Increases the row to move vertically</span></span><br><span class="line">      row += increasementFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Resets the for loop last move</span></span><br><span class="line">    row -= increasementFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Moves the column to avoid duplicate</span></span><br><span class="line">    col -= increasementFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Consumes a vertical length</span></span><br><span class="line">    verticalMovableLength--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="Pascal’s-Triangle"><a href="#Pascal’s-Triangle" class="headerlink" title="Pascal’s Triangle"></a>Pascal’s Triangle</h1><p>Given a non-negative integer numRows, generate the first numRows of Pascal’s triangle.</p><p>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><img src="PascalTriangleAnimated2.gif" alt=""></p><p><a href="https://leetcode.com/explore/learn/card/array-and-string/202/introduction-to-2d-array/1170/" target="_blank" rel="noopener">LeetCode Link</a></p><hr><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params">numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Initializes indexs and result</span></span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> col = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (row = <span class="number">0</span>; row &lt; numRows; row++) &#123;</span><br><span class="line">    <span class="comment">// Creates a new list for every row</span></span><br><span class="line">    <span class="keyword">let</span> rowList = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (col = <span class="number">0</span>; col &lt;= row; col++) &#123;</span><br><span class="line">      <span class="comment">// Puts the specific number to the current row list</span></span><br><span class="line">      rowList.push(getTriangleNumber(row, col));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Puts the current row list to result list</span></span><br><span class="line">    result.push(rowList);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFactorials</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ( num * getFactorials(num - <span class="number">1</span>) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://medium.com/i-math/top-10-secrets-of-pascals-triangle-6012ba9c5e23  (Secret #7)</span></span><br><span class="line"><span class="comment">// https://www.mathsisfun.com/pascals-triangle.html</span></span><br><span class="line"><span class="comment">// Gets the specific number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTriangleNumber</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getFactorials(row) / (getFactorials(col) * getFactorials(row - col));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Introduction to Array</title>
      <link href="/2018/07/03/intro-to-array/"/>
      <url>/2018/07/03/intro-to-array/</url>
      <content type="html"><![CDATA[<p>An array is a basic data structure to store a collection of elements sequentially. But elements can be accessed randomly since each element in the array can be identified by an array index.</p><p>An array can have one or more dimensions. Here we start with the one-dimensional array, which is also called the linear array</p><a id="more"></a><h2 id="Find-Pivot-Index"><a href="#Find-Pivot-Index" class="headerlink" title="Find Pivot Index"></a>Find Pivot Index</h2><p>Given an array of integers nums, write a method that returns the “pivot” index of this array.</p><p>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.</p><p>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums = [1, 7, 3, 6, 5, 6]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.</span><br><span class="line">Also, 3 is the first index where this occurs.</span><br></pre></td></tr></table></figure></p><hr><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums = [1, 2, 3]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation:</span><br><span class="line">There is no index that satisfies the conditions in the problem statement.</span><br></pre></td></tr></table></figure></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pivotIndex = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> length = nums.length;</span><br><span class="line">  <span class="keyword">if</span>(length === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</span><br><span class="line">    total += nums[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftTotal = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>( total === (leftTotal * <span class="number">2</span> + nums[j]) )&#123;</span><br><span class="line">       <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">    leftTotal += nums[j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Largest-Number-At-Least-Twice-of-Others"><a href="#Largest-Number-At-Least-Twice-of-Others" class="headerlink" title="Largest Number At Least Twice of Others"></a>Largest Number At Least Twice of Others</h2><p>In a given integer array nums, there is always exactly one largest element.</p><p>Find whether the largest element in the array is at least twice as much as every other number in the array.</p><p>If it is, return the index of the largest element, otherwise return -1.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3, 6, 1, 0]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: 6 is the largest integer, and for every other number in the array x,</span><br><span class="line">6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1, 2, 3, 4]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 4 isn&apos;t at least as big as twice the value of 3, so we return -1.</span><br></pre></td></tr></table></figure></p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> dominantIndex = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> first = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> second = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] &gt; second)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[i] &gt; first)&#123;</span><br><span class="line">        second = first;</span><br><span class="line">        first = nums[i]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        second = nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (first &gt;= second * <span class="number">2</span>) ? nums.indexOf(first) : <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="Plus-One"><a href="#Plus-One" class="headerlink" title="Plus One"></a>Plus One</h2><p>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.</p><p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p><p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure></p><hr><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure></p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; digits</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> plusOne = <span class="function"><span class="params">digits</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits[i] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">      digits[i]++</span><br><span class="line">      <span class="keyword">return</span> digits</span><br><span class="line">    &#125;</span><br><span class="line">    digits[i] = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, ...digits]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rotate List</title>
      <link href="/2018/06/28/rotate-list/"/>
      <url>/2018/06/28/rotate-list/</url>
      <content type="html"><![CDATA[<h1 id="轮换链表"><a href="#轮换链表" class="headerlink" title="轮换链表"></a>轮换链表</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Given a linked list, rotate the list to the right by k places, where k is non-negative.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</span><br><span class="line">Output: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: 0-&gt;1-&gt;2-&gt;NULL, k = 4</span><br><span class="line">Output: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="line">rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="line">rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="line">rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>递归</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!head || k === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> node = head;</span><br><span class="line">  <span class="keyword">while</span>(node)&#123;</span><br><span class="line">    length++;</span><br><span class="line">    node = node.next;</span><br><span class="line">  &#125;</span><br><span class="line">  k = k % length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rotatet(head, k);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotatet</span>(<span class="params">node, k</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(k === <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> currentNode = node;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span>(currentNode.next)&#123;</span><br><span class="line">    prev = currentNode;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(prev)&#123;</span><br><span class="line">    prev.next = <span class="literal">null</span>;</span><br><span class="line">    currentNode.next = node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rotatet(currentNode, k<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>迭代</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rotateRight = <span class="function"><span class="keyword">function</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( !head || k &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> length = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> current = head;</span><br><span class="line">  <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">    length++;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  k = k % length;</span><br><span class="line">  <span class="keyword">if</span>(!k)&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  current.next = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rotateNum = length - k - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(rotateNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    head = head.next;</span><br><span class="line">    rotateNum--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newHead = head.next;</span><br><span class="line">  head.next = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Insert into a Cyclic Sorted List</title>
      <link href="/2018/06/27/insert-into-a-cyclic-sorted-list/"/>
      <url>/2018/06/27/insert-into-a-cyclic-sorted-list/</url>
      <content type="html"><![CDATA[<h1 id="循环有序列表插值"><a href="#循环有序列表插值" class="headerlink" title="循环有序列表插值"></a>循环有序列表插值</h1><p>Given a node from a cyclic linked list which is sorted in ascending order, write a function to insert a value into the list such that it remains a cyclic sorted list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the cyclic list.</p><p>If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the cyclic list should remain sorted.</p><p>If the list is empty (i.e., given node is <code>null</code>), you should create a new single cyclic list and return the reference to that single node. Otherwise, you should return the original given node.</p><p>The following example may help you understand the problem better:</p><p><img src="InsertCyclicBefore.png" alt=""><br>In the figure above, there is a cyclic sorted list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list.</p><p><img src="InsertCyclicAfter.png" alt=""><br>The new node should insert between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insert = <span class="function"><span class="keyword">function</span>(<span class="params">head, insertVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newNode = <span class="keyword">new</span> ListNode(insertVal);</span><br><span class="line">  <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">    newNode.next = newNode;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> currentNode = head;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(currentNode.val &lt;= insertVal &amp;&amp; currentNode.next.val &gt;= insertVal <span class="comment">/* middle value */</span></span><br><span class="line">      || currentNode.val &gt;= currentNode.next.val &amp;&amp; insertVal &gt; currentNode.val <span class="comment">/* max value */</span></span><br><span class="line">      || currentNode.val &gt;= currentNode.next.val &amp;&amp; insertVal &lt; currentNode.next.val) <span class="comment">/* min value */</span></span><br><span class="line">    &#123;</span><br><span class="line">      newNode.next = currentNode.next;</span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flatten a Multilevel Doubly Linked List</title>
      <link href="/2018/06/27/flatten-a-multilevel-doubly-linked-list/"/>
      <url>/2018/06/27/flatten-a-multilevel-doubly-linked-list/</url>
      <content type="html"><![CDATA[<h1 id="展平多层双向链表"><a href="#展平多层双向链表" class="headerlink" title="展平多层双向链表"></a>展平多层双向链表</h1><p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p><p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"> 1---2---3---4---5---6--NULL</span><br><span class="line">         |</span><br><span class="line">         7---8---9---10--NULL</span><br><span class="line">             |</span><br><span class="line">             11--12--NULL</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1-2-3-7-8-11-12-9-10-4-5-6-NULL</span><br></pre></td></tr></table></figure><p>Given the following multilevel doubly linked list:<br><img src="MultilevelLinkedList.png" alt=""></p><p>We should return the following flattened doubly linked list:<br><img src="MultilevelLinkedListFlattened.png" alt=""></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = head;</span><br><span class="line">  <span class="keyword">let</span> prevNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.child) &#123;</span><br><span class="line">      <span class="keyword">let</span> nextNode = currentNode.next;</span><br><span class="line">      currentNode.child.prev = currentNode;</span><br><span class="line">      currentNode.next = flatten(currentNode.child);</span><br><span class="line">      currentNode.child = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nextNode) &#123;</span><br><span class="line">        prevNode.next = nextNode;</span><br><span class="line">        nextNode.prev = prevNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prevNode = currentNode;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Add Two Numbers</title>
      <link href="/2018/06/26/add-two-numbers/"/>
      <url>/2018/06/26/add-two-numbers/</url>
      <content type="html"><![CDATA[<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure><hr><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fakeHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">let</span> currentNode = fakeHead;</span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(l1 || l2 || carry)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = carry;</span><br><span class="line">    <span class="keyword">if</span>(l1)&#123;</span><br><span class="line">      sum += l1.val;</span><br><span class="line">      l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l2)&#123;</span><br><span class="line">      sum += l2.val;</span><br><span class="line">      l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    carry = <span class="built_in">parseInt</span>(sum / <span class="number">10</span>);</span><br><span class="line">    currentNode.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fakeHead.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Merge Two Sorted Lists</title>
      <link href="/2018/06/25/merge-two-sorted-lists/"/>
      <url>/2018/06/25/merge-two-sorted-lists/</url>
      <content type="html"><![CDATA[<h1 id="合并两个有序链表-Merge-Two-Sorted-Lists"><a href="#合并两个有序链表-Merge-Two-Sorted-Lists" class="headerlink" title="合并两个有序链表 Merge Two Sorted Lists"></a>合并两个有序链表 Merge Two Sorted Lists</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!l1)&#123;</span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!l2)&#123;</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(l1.val &lt; l2.val)&#123;</span><br><span class="line">    l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!l1 || !l2)&#123;</span><br><span class="line">    <span class="keyword">return</span> getRest(l1,l2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fakeHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">let</span> currentNode = fakeHead;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(l1 &amp;&amp; l2)&#123;</span><br><span class="line">    <span class="keyword">let</span> l1IsSmaller = l1.val &lt; l2.val;</span><br><span class="line">    <span class="keyword">let</span> newNode = l1IsSmaller ? <span class="keyword">new</span> ListNode(l1.val) : <span class="keyword">new</span> ListNode(l2.val);</span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">    currentNode = newNode;</span><br><span class="line">    <span class="keyword">if</span>(l1IsSmaller)&#123;</span><br><span class="line">      l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  currentNode.next = getRest(l1,l2);</span><br><span class="line">  <span class="keyword">return</span> fakeHead.next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRest</span>(<span class="params">l1,l2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!l1 ? l1 : l2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Palindrome Linked List</title>
      <link href="/2018/06/24/palindrome-linked-list/"/>
      <url>/2018/06/24/palindrome-linked-list/</url>
      <content type="html"><![CDATA[<h1 id="判断链表是否是回文链表"><a href="#判断链表是否是回文链表" class="headerlink" title="判断链表是否是回文链表"></a>判断链表是否是回文链表</h1><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1 → 2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1 → 2 → 2 → 1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Follow up:<br>Could you do it in O(n) time and O(1) space?<br>(Try to solve this problem in O(N) time and O(1) space. Hint: Reverse part of the linked list.)</p><hr><p>1.反转部分链表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!head || !head.next)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!head.next.next)&#123;</span><br><span class="line">    <span class="keyword">return</span> head.val === head.next.val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> slow = head;</span><br><span class="line">  <span class="keyword">let</span> fast = head;</span><br><span class="line">  <span class="keyword">while</span>(fast.next &amp;&amp; fast.next.next)&#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">  &#125;</span><br><span class="line">  slow.next = reverseList(slow.next);</span><br><span class="line">  fast = head;</span><br><span class="line">  slow = slow.next;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(slow !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fast.val !== slow.val)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      fast = fast.next;</span><br><span class="line">      slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> save = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span>(head)&#123;</span><br><span class="line">    save = head.next;</span><br><span class="line">    head.next = prev;</span><br><span class="line">    prev = head;</span><br><span class="line">    head = save;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>2.使用堆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> temp = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(head != <span class="literal">null</span>) &#123;</span><br><span class="line">    stack.push(head.val);</span><br><span class="line">    head = head.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(temp != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.val != stack.pop()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = temp.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>3.使用递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> recurse(head);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isPal = recurse(node.next);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node.val === head.val)&#123;</span><br><span class="line">      head = head.next;</span><br><span class="line">      <span class="keyword">return</span> isPal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>4.让链表变成双向的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = head;</span><br><span class="line">  index.prev = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(index.next)&#123;</span><br><span class="line">    index.next.prev = inedx;</span><br><span class="line">    index = index.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(index !== head)&#123;</span><br><span class="line">    <span class="keyword">if</span>(index.val === head.val)&#123;</span><br><span class="line">      index = index.prev;</span><br><span class="line">      head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Odd Even Linked List</title>
      <link href="/2018/06/23/odd-even-linked-list/"/>
      <url>/2018/06/23/odd-even-linked-list/</url>
      <content type="html"><![CDATA[<h1 id="奇偶重排单向链表"><a href="#奇偶重排单向链表" class="headerlink" title="奇偶重排单向链表"></a>奇偶重排单向链表</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p><p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL</span><br><span class="line">Output: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><hr><p>Note:</p><p>The relative order inside both the even and odd groups should remain as it was in the input.<br>The first node is considered odd, the second node even and so on …</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>创建奇、偶两个指针来维护奇、偶两个链表，最后把奇链表的结尾指向偶链表的开头。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oddEvenList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!head || !head.next)&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> odd = head;</span><br><span class="line">  <span class="keyword">let</span> even = head.next;</span><br><span class="line">  <span class="keyword">let</span> firstEven = even;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(even.next)&#123;</span><br><span class="line">    odd.next = even.next;</span><br><span class="line">    odd = odd.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(odd.next)&#123;</span><br><span class="line">      even.next = odd.next;</span><br><span class="line">      even = even.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      even.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  odd.next = firstEven;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Remove Linked List Elements</title>
      <link href="/2018/06/22/remove-linked-list-elements/"/>
      <url>/2018/06/22/remove-linked-list-elements/</url>
      <content type="html"><![CDATA[<h1 id="移除链表中的元素"><a href="#移除链表中的元素" class="headerlink" title="移除链表中的元素"></a>移除链表中的元素</h1><p>Remove all elements from a linked list of integers that have value val.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeElements = <span class="function"><span class="keyword">function</span>(<span class="params">head, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!head)&#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (head &amp;&amp; head.val == val)&#123;</span><br><span class="line">    head = head.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> current = head;</span><br><span class="line">  <span class="keyword">while</span> (current)&#123;</span><br><span class="line">    <span class="keyword">if</span> (current.next &amp;&amp; current.next.val == val)&#123;</span><br><span class="line">      current.next = current.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Reverse a linked list</title>
      <link href="/2018/06/22/Reverse-a-linked-list/"/>
      <url>/2018/06/22/Reverse-a-linked-list/</url>
      <content type="html"><![CDATA[<h1 id="反转单向链表"><a href="#反转单向链表" class="headerlink" title="反转单向链表"></a>反转单向链表</h1><p>#思路</p><p>对于每一个节点，都让自己指向前一个节点，可以用迭代或者递归。</p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> save = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(head)&#123;</span><br><span class="line">    save = head.next;</span><br><span class="line">    head.next = prev;</span><br><span class="line"></span><br><span class="line">    prev = head;</span><br><span class="line">    head = save;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseList = reverseList(head) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!head || !head.next) &#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newHead = reverseList(head.next);</span><br><span class="line"></span><br><span class="line">  head.next.next = head;</span><br><span class="line">  head.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Remove Nth Node From End of List</title>
      <link href="/2018/06/20/Remove-Nth-Node-From-End-of-List/"/>
      <url>/2018/06/20/Remove-Nth-Node-From-End-of-List/</url>
      <content type="html"><![CDATA[<h1 id="去掉链表倒数第-n-个节点"><a href="#去掉链表倒数第-n-个节点" class="headerlink" title="去掉链表倒数第 n 个节点"></a>去掉链表倒数第 n 个节点</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用 fast slow 两个指针，fast 先移动 n 个节点，slow 再出发，此时两个指针相隔 n 个节点，fast 到达链表末尾时，slow 正好到达倒数第 n 的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!head || !head.next)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> slow = head;</span><br><span class="line">  <span class="keyword">let</span> fast = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    fast = fast.next;</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fast)&#123;</span><br><span class="line">    <span class="keyword">while</span>(fast.next)&#123;</span><br><span class="line">      slow = slow.next;</span><br><span class="line">      fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    head = head.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Loop in Linked List</title>
      <link href="/2018/06/07/loop-in-linked-list/"/>
      <url>/2018/06/07/loop-in-linked-list/</url>
      <content type="html"><![CDATA[<h1 id="链表中的环"><a href="#链表中的环" class="headerlink" title="链表中的环"></a>链表中的环</h1><h2 id="问题：给定一个单向链表，如何判断链表中是否有环？"><a href="#问题：给定一个单向链表，如何判断链表中是否有环？" class="headerlink" title="问题：给定一个单向链表，如何判断链表中是否有环？"></a>问题：给定一个单向链表，如何判断链表中是否有环？</h2><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>兔子和乌龟要进行一次赛跑 ，他们将在跑道同一位置同时起跑：</p><ol><li>如果在<code>直线</code>跑道上  比赛，那么兔子和乌龟最终会分别跑到终点；</li><li>如果在<code>圆形</code>跑道上比赛，因为兔子的速度比乌龟快，所以兔子最终会赶上乌龟 。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果头节点不存在，或者链表只有头节点，则链表没有环</span></span><br><span class="line">  <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 慢指针每次移动一步，快指针每次移动两步</span></span><br><span class="line">  <span class="keyword">let</span> slow = head.next;</span><br><span class="line">  <span class="keyword">let</span> fast = head.next.next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 快指针已经到达终点，说明链表没有环</span></span><br><span class="line">  <span class="keyword">if</span>(fast === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每移动一次就检查一遍两个指针是否相遇</span></span><br><span class="line">  <span class="keyword">while</span>(slow!==fast)&#123;</span><br><span class="line">    <span class="comment">// 如果快指针下一步可以到达终点，说明链表没有环</span></span><br><span class="line">    <span class="keyword">if</span>(fast.next === <span class="literal">null</span> || fast.next.next === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 慢指针向前走一步，快指针向前走两步</span></span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 两个指针相遇，说明链表有环</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="新问题：对于有环单向链表，如何找到的-环的-起点。"><a href="#新问题：对于有环单向链表，如何找到的-环的-起点。" class="headerlink" title="新问题：对于有环单向链表，如何找到的  环的  起点。"></a>新问题：对于有环单向链表，如何找到的  环的  起点。</h2><h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考 "></a>思考 </h2><p>判断链表是否有环的逻辑和上面一样，现在只关注  有环的情况。</p><p>假设:</p><ul><li>经过<code>k</code>步之后两个指针相遇，</li><li>链表头节点到环的起点的距离为<code>s</code>,</li><li>环的起到到相遇点的距离为<code>m</code>,</li><li>环的长度为<code>L</code></li></ul><p><br></p><p>此时:<br> 慢指针走过的路程为:<br>D<sub>slow</sub> = k = s + m + n<sub>1</sub> * L (n<sub>1</sub>为慢指针绕环的次数)</p><p>快指针走过的路程为:<br>D<sub>fast</sub> = 2k = s + m + n<sub>2</sub> * L (n<sub>2</sub>为快指针绕环的次数)</p><p>合并得到<code>s</code>的表达式: s = (n<sub>2</sub> - 2n<sub>1</sub>) * L - m</p><p><img src="Loop-In-Linked-List.jpg" alt=""></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>当两个指针相遇时，将其中一个移动到头节点，然后让两个指针一步一步往后走，它们再次相遇的节点就是环起点。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> slow = head;</span><br><span class="line">  <span class="keyword">let</span> fast = head;</span><br><span class="line">  <span class="keyword">let</span> cycle = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (fast.next &amp;&amp; fast.next.next) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    <span class="keyword">if</span> (slow === fast) &#123;</span><br><span class="line">      cycle = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cycle) &#123;</span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (slow !== fast) &#123;</span><br><span class="line">      slow = slow.next;</span><br><span class="line">      fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Singly Linked List</title>
      <link href="/2018/06/06/js-singly-linked-list/"/>
      <url>/2018/06/06/js-singly-linked-list/</url>
      <content type="html"><![CDATA[<h1 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单向链表是有一系列节点串联起来的一种数据结构，每个节点包括一个数据值和一个指针，指针可以指向另一个节点。</p><p><img src="15282092294403.jpg" alt=""></p><p>跟数组不同，我们无法直接通过下标获取单向链表的第<code>n</code>项的值，我们只能一个接一个地遍历链表节点，并根据节点的<code>next</code>指针找到下一个节点，直到找到我们想要的节点。</p><p>举个例子，假设上图中值为 23 的节点是链表的头节点，如果我们想要获取值为 15 的节点，我们必须从头节点开始，通过<code>next</code>指针找到值为 6 的节点，再根据<code>next</code>指针找到值为 15 的节点。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><p>已有一个单向链表如下图所示，<br><img src="15282099024240.jpg" alt=""></p><p>假设我们希望在<code>prev</code>和<code>next</code>节点中添加一个<code>cur</code>节点，我们需要进行以下操作：</p><ol><li><p>初始化需要添加的<code>cur</code>节点，给节点敷一个值。<br><img src="15282098271599.png" alt=""></p></li><li><p>把<code>cur</code>节点的<code>next</code>指针指向<code>prev</code>节点的<code>next</code>指针所指的<code>next</code>节点。<br><img src="15282098307174.png" alt=""></p></li><li><p>把<code>prev</code>节点的<code>next</code>指针指向<code>cur</code>节点。<br><img src="15282098335472.png" alt=""></p></li></ol><hr><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>已有一个单向链表如下图所示，<br><img src="15282122185894.png" alt=""></p><p>如果我们想要删除<code>cur</code>节点，我们需要进行以下操作：</p><ol><li><p>找到<code>cur</code>节点的前一个节点<code>prev</code>和后一个节点<code>next</code><br><img src="15282123171394.png" alt=""></p></li><li><p>把<code>prev</code>节点指向<code>next</code>节点<br><img src="15282124857869.png" alt=""></p></li></ol><hr><h2 id="实现单向链表-SinglyList"><a href="#实现单向链表-SinglyList" class="headerlink" title="实现单向链表 SinglyList"></a>实现单向链表 SinglyList</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sampleNode = &#123; <span class="attr">val</span> : <span class="number">0</span>, <span class="attr">next</span> : <span class="literal">null</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义单向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> MyLinkedList = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回下标为 index 的节点的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// 下标大于链表长度，返回 -1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(index &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> currentNode.val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的头部添加值为 val 的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.addAtHead = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个 next 指向链表头的新节点</span></span><br><span class="line">  <span class="keyword">const</span> newNode = &#123;</span><br><span class="line">    val,</span><br><span class="line">    next : <span class="keyword">this</span>.head</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把新节点设为链表新的头节点</span></span><br><span class="line">  <span class="keyword">this</span>.head = newNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了新节点，链表长度加1</span></span><br><span class="line">  <span class="keyword">this</span>.length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的尾部添加值为 val 的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.addAtTail = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 链表长度为0，调用在头部添加节点的方法</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.length === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.addAtHead(val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从头节点开始遍历到尾节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">while</span>(currentNode.next)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建新的节点</span></span><br><span class="line">  <span class="keyword">const</span> newNode = &#123;val&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把链表尾节点的 next 指向新的节点</span></span><br><span class="line">  currentNode.next = newNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了新节点，链表长度加1</span></span><br><span class="line">  <span class="keyword">this</span>.length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在链表的第 index 项添加一个值为 val 的节点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果 index 等于链表的长度，则在链表尾部添加节点</span></span><br><span class="line"><span class="comment"> * 如果 index 大于大于链表长度，则不添加节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.addAtIndex = <span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// index 大于链表长度，直接返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(index === <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// index 等于链表长度，调用在尾部添加节点的方法</span></span><br><span class="line">    <span class="keyword">this</span>.addAtTail(val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(index === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// index 等于0，调用在头部添加节点的方法</span></span><br><span class="line">    <span class="keyword">this</span>.addAtHead(val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从头节点开始遍历链表到第 （index - 1） 个节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (index - <span class="number">1</span>); i++)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建新节点</span></span><br><span class="line">  <span class="keyword">const</span> newNode = &#123; val &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新节点的 next 指向第 （index - 1） 个节点的 next</span></span><br><span class="line">  newNode.next = currentNode.next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第 （index - 1） 个节点的 next 指向新的节点</span></span><br><span class="line">  currentNode.next = newNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了新节点，链表长度加1</span></span><br><span class="line">  <span class="keyword">this</span>.length++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从链表中删除第 index 个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyLinkedList.prototype.deleteAtIndex = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">    <span class="comment">// index 的值大于链表长度，直接返回</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从头节点开始遍历到第 （index - 1） 个节点</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (index<span class="number">-1</span>); i++)&#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把第（index - 1） 个节点的 next 指向第 （index + 1）个节点</span></span><br><span class="line">  currentNode.next = currentNode.next.next;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除了节点，链表长度减1</span></span><br><span class="line">  <span class="keyword">this</span>.length--;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> data-structures </tag>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS Promise</title>
      <link href="/2018/06/04/js-promise/"/>
      <url>/2018/06/04/js-promise/</url>
      <content type="html"><![CDATA[<h1 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h1><p>Promise 是一个在将来未知时间返回异步操作单一结果的对象。</p><blockquote><p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p></blockquote><h2 id="Promise-有三种状态"><a href="#Promise-有三种状态" class="headerlink" title="Promise 有三种状态:"></a>Promise 有三种状态:</h2><ol><li>pending: 初始状态，既不是完成也不是拒绝</li><li>fulfilled: 完成状态，说明操作已经成功完成</li><li>rejected: 拒绝状态，说明操作失败</li></ol><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>通过 <code>new</code> 来创建一个 <code>Promise</code> 对象， Promise 有 <code>resolve</code> 和 <code>reject</code> 2个参数，操作完成时调用 <code>resolve</code>, 操作失败时调用 <code>reject</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAsyncFunction</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    xhr.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(xhr.responseText);</span><br><span class="line">    xhr.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(xhr.statusText);</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>使用 <code>promise.then(successCallback, failureCallback)</code> 来链式调用 promise</p><p>使用 <code>promise.catch(failureCallback)</code> 来处理错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Initial'</span>);</span><br><span class="line"></span><br><span class="line">    resolve();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Something failed'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do this'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do that'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Do this, no matter what happened before'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial</span></span><br><span class="line"><span class="comment">// Do that</span></span><br><span class="line"><span class="comment">// Do this, no matter what happened before</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>有时我们需要等待所有异步操作都完成之后再进行某些操作，这时我们可以使用 <code>promise.all</code></p><p>虽然 <code>text2</code> 只需要 500 毫秒就能完成，但是代码的结果是 2秒后一起返回 <code>text1</code> 和 <code>text2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(&#123; <span class="attr">content</span>: <span class="string">'I love js'</span>&#125;);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve([<span class="string">'I like css too!'</span>]);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span></span><br><span class="line">  .all([text1, text2])</span><br><span class="line">  .then(<span class="function"><span class="params">responses</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [text1Content, text2Contect] = responses;</span><br><span class="line">    <span class="built_in">console</span>.log(text1Content, text2Contect)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="JS-sleep-方法"><a href="#JS-sleep-方法" class="headerlink" title="JS sleep 方法"></a>JS sleep 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Taking a break...'</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">2000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Two second later'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
